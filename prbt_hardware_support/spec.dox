/*
 * Copyright (c) 2019 Pilz GmbH & Co. KG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @page Spec
 *
 *  @tableofcontents
 *  @section system_specification System Specification
 *  @brief System Specification
 *
 *  @subsection ISO-10218-1
 *
 *
 *
 * @subsubsection sto_stop1 Safe torque off (STO) and  Stop 1
 *
 * @note STO == 1/TRUE  <-> manipulator is allowed to move freely
 * @note STO == 0/FALSE <-> manipulator is NOT allowed to move (except for stop motion)
 *
 * @note A Stop 1 consists of holding the controller and halting the drives afterwards.
 *  - Holding the controller starts with performing a stop motion (possibly replacing other prevailing motions).
 *  - As long as the controller is holded, no new motions can be performed.
 *
 * @note The term "recovering" in the following section refers to a pending call on the respective service.
 *
 * @definereq{Stop1_Trigger}
 *  - A Stop 1 is triggered, if at least one of the following cases is true:
 *    - the state of the STO changes from TRUE -> FALSE when the drives are not
 *      recovering (Otherwise see \refspec{STO_false_during_recover}),
 *    - connection to safety controller is lost,
 *    - the messages informing about the STO (coming from the
 *      safety controller) is incomplete or in any way corrupted,
 *    - the communication protocol used by the safety controller
 *      does not fulfill the expected specification
 *      (defined by the version of the protocol).
 *
 * @definereq{STO_false_during_recover}
 *  - If the state of the STO changes from TRUE -> FALSE when the drives are recovering,
 *    the controller hold is kept, that is performing a stop motion is skipped.
 *
 * @definereq{Recover_driver_after_STO_false}
 *  - If the STO changes from FALSE -> TRUE, the driver is recovered.
 *
 * @definereq{Leave_hold_after_recover}
 *  - If STO is still TRUE after recovering, the controller is no longer holded.
 *
 *
 * @definereq{No_Startup_if_controller_hold_missing}
 *  - The system is not allowed to complete the startup procedure until
 *    the controller hold service is available.
 *
 * @definereq{No_Startup_if_driver_halt_missing}
 *  - The system is not allowed to complete the startup procedure until
 *    the driver halt service is available.
 *
 * @definereq{No_Startup_if_controller_unhold_missing}
 *  - The system is not allowed to complete the startup procedure until
 *    the controller unhold service is available.
 *
 * @definereq{No_Startup_if_driver_recover_missing}
 *  - The system is not allowed to complete the startup procedure until
 *    the driver recover service is available.
 *
 * @definereq{Controller_service_unhold_optional}
 *  - If the controller unhold service fails, Stop1 can still be triggered.
 *
 * @definereq{Controller_service_hold_optional}
 *  - If the controller hold service fails during Stop1, the driver can still be recovered.
 *
 *
 *
 * @subsubsection brake_test Braketest
 *
 * @definereq{Is_BrakeTest_required_mechanism}
 *  - The system provides a mechanism which allows to determine if
 *    a braketest is requested by the safety controller.
 *
 *  - The mechanism continues to return the last received value,
 *    if at least one of the following conditions is true:
 *    - the connection to the safety controller is lost,
 *    - the messages informing about the operation mode (coming from the
 *      safety controller) is incomplete or in any way corrupted,
 *    - the communication protocol used by the safety controller
 *      does not fulfill the expected specification
 *      (defined by the version of the protocol).
 *
 * @definereq{Execute_BrakeTest_mechanism}
 * - The system provides a mechanism which allows to execute a brake test.
 * - The brake test is performed for all axes.
 * - The brake test mechanism returns a status stating if the
 *    brake test was successful xor what error occured.
 * - At the beginning of the brake test it is checked if the manipulator is
 *    currently moving. In case the manipulator is moving, the brake test is not
 *    performed and an error is retured.
 * - As long as the brake test is performed no motion is allowed. Commands
 *    send during the execution of the brake test are rejected.
 * - Brake tests are only performed for drives which define that they require
 *    a brake test (configurable via config file or parameter server).
 * - After the brake test is performed the result of the brake test is
 *    reported back to the safety controller. The result is also reported back
 *    to the safety controller if the brake test was not required by the
 *    safety controller.
 * - If the connection to the safety controller is lost, no further
 *    action regarding the sending of the brake test result is taken (e.g. NO
 *    result sending as soon as the connection is established again).
 *
 *
 *
 * @subsubsection operation_mode Operation Mode
 *
 * @definereq{Get_OperationMode_mechanism}
 *  - The system provides a mechanism which allows to request the current
 *    operation mode of the safety controller.
 *
 *  - The mechanism to request the operation mode returns UNKNOWN,
 *    if at least one of the following cases comes true:
 *    - the connection to the safety controller is lost,
 *    - the messages informing about the operation mode (coming from the
 *      safety controller) is incomplete or in any way corrupted,
 *    - the communication protocol used by the safety controller
 *      does not fulfill the expected specification
 *      (defined by the version of the protocol).
 *
 */
